<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskRunner</name>
    </assembly>
    <members>
        <member name="T:TaskRunner.ArgsTuple">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Class represents a tuple to execute the program. It contains all possible flags and values
            </summary>
        </member>
        <member name="M:TaskRunner.ArgsTuple.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Help">
            <summary>
            If true, the usage will be displayed
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Output">
            <summary>
            In true, the output of the executed tasks is passed to the command shell. The program runs in silent mode otherwise
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.HaltOnError">
            <summary>
            If true, the program halts on a error while execution of the tasks
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Run">
            <summary>
            If true, a run flag was passed to the program. This starts the execution process
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Log">
            <summary>
            In true, the result of the executed tasks are logged to a program logfile
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Demo">
            <summary>
            If true, a demo flag was passed to the program. This will generate the example configurations in the program folder
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Docs">
            <summary>
            If true, the documentation of tasks will be called
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.Markdown">
            <summary>
            If true, the documentation of tasks will be saved as markdown files
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.LogFilePath">
            <summary>
            Path to the program logfile
            </summary>
        </member>
        <member name="P:TaskRunner.ArgsTuple.ConfigFilePath">
            <summary>
            Path to the configuration file
            </summary>
        </member>
        <member name="T:TaskRunner.ArgsTuple.ArgType">
            <summary>
            Enum to define the type of the passed argument
            </summary>
        </member>
        <member name="F:TaskRunner.ArgsTuple.ArgType.flag">
            <summary>
            The argument is a flag like -r or --demo
            </summary>
        </member>
        <member name="F:TaskRunner.ArgsTuple.ArgType.configFile">
            <summary>
            The argument is the path to the configuration file (XML file)
            </summary>
        </member>
        <member name="F:TaskRunner.ArgsTuple.ArgType.logFile">
            <summary>
            The argument it the path to the program logfile
            </summary>
        </member>
        <member name="F:TaskRunner.ArgsTuple.ArgType.undefined">
            <summary>
            The argument is not defined
            </summary>
        </member>
        <member name="T:TaskRunner.Documentation">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Class for handling of the console documentation
            </summary>
        </member>
        <member name="F:TaskRunner.Documentation.NL">
            <summary>
            Globally used new line sequence
            </summary>
        </member>
        <member name="M:TaskRunner.Documentation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.Documentation.#ctor(System.String,System.String)">
            <summary>
            Constructor with parameter
            </summary>
            <param name="title">Title of the documentation object</param>
            <param name="subtitle">Sub title of the documentation object</param>
        </member>
        <member name="M:TaskRunner.Documentation.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with parameters
            </summary>
            <param name="title">Title of the documentation object</param>
            <param name="description">Description of the documentation object</param>
            <param name="subtitle">Sub title of the documentation object</param>
        </member>
        <member name="M:TaskRunner.Documentation.AddTuple(System.String,System.String)">
            <summary>
            Adds a tuple to the documentation object
            </summary>
            <param name="value">Value of the tuple</param>
            <param name="description">Description of the tuple</param>
        </member>
        <member name="M:TaskRunner.Documentation.AddTuple(System.String,System.String,System.Boolean)">
            <summary>
            Adds a tuple to the documentation object
            </summary>
            <param name="value">Value of the tuple</param>
            <param name="description">Description of the tuple</param>
            <param name="overrodeTagFormatting">If true, the tuple will be displayed with its raw value and not as XML tag</param>
        </member>
        <member name="M:TaskRunner.Documentation.GetDocumentation(System.Int32)">
            <summary>
            Returns the documentation object as string
            </summary>
            <param name="maxLength">>Length in numbers of characters (console width)</param>
            <returns></returns>
        </member>
        <member name="M:TaskRunner.Documentation.GetDocumentation(System.Int32,System.Boolean)">
            <summary>
            Returns the documentation object as string
            </summary>
            <param name="maxLength">>Length in numbers of characters (console width)</param>
            <param name="asTagDoc">If true, the documentation will be rendered as documentation for tags</param>
            <returns></returns>
        </member>
        <member name="M:TaskRunner.Documentation.GetDocumentation(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns the documentation object as string
            </summary>
            <param name="maxLength">Length in numbers of characters (console width)</param>
            <param name="asTagDoc">If true, the documentation will be rendered as documentation for tags</param>
            <param name="asMarkdown">If true, the documentation will be rendered as markdown, The lengthparameter will be skipped</param>
            <returns></returns>
        </member>
        <member name="M:TaskRunner.Documentation.GetDocumentation(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the documentation object as string
            </summary>
            <param name="maxLength">Length in numbers of characters (console width)</param>
            <param name="asTagDoc">If true, the documentation will be rendered as documentation for tags</param>
            <param name="asHeader">If true, the header will be rendered</param>
            <param name="asMarkdown">If true, the documentation will be rendered as markdown, The length parameter will be skipped</param>
            <param name="skipTitle">If true, no Title will be rendered</param>
            <returns></returns>
        </member>
        <member name="M:TaskRunner.Documentation.GetMarkdownTable(System.Boolean,System.String,System.String)">
            <summary>
            Returns the tuples as markdown table
            </summary>
            <param name="asTag">If true, the line will be rendered as documentation for tags</param>
            <param name="leftHeader">Left header text</param>
            <param name="rightHeader">Right header text</param>
            <returns>Formatted markdown table</returns>
        </member>
        <member name="M:TaskRunner.Documentation.FormatLines(System.Int32,System.Boolean)">
            <summary>
            Returns the a formatted string with line breaks
            </summary>
            <param name="maxlength">Length in numbers of characters (console width)</param>
            <param name="asTag">If true, the line will be rendered as documentation for tags</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:TaskRunner.Documentation.GetSplitPosition">
            <summary>
            Returns the number of characters where the text splits between value and description (over all tuples)
            </summary>
            <returns>Number of characters</returns>
        </member>
        <member name="M:TaskRunner.Documentation.ConcatLine(System.Text.StringBuilder@,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Concatenates lines according to windows widths an split values
            </summary>
            <param name="sb">StringBuilder as reference</param>
            <param name="item">Input value</param>
            <param name="description">Description text</param>
            <param name="split">Number of characters to splits</param>
            <param name="lenght">Window width in number of characters</param>
            <param name="noDelimitation">If true, no delimitation will be applied</param>
        </member>
        <member name="P:TaskRunner.Documentation.Tuples">
            <summary>
            Tuples of the documentation object
            </summary>
        </member>
        <member name="P:TaskRunner.Documentation.Title">
            <summary>
            Title of the documentation object
            </summary>
        </member>
        <member name="P:TaskRunner.Documentation.SubTitle">
            <summary>
            Sub title of the document object
            </summary>
        </member>
        <member name="P:TaskRunner.Documentation.Description">
            <summary>
            Description of the documentation object
            </summary>
        </member>
        <member name="P:TaskRunner.Documentation.Suffix">
            <summary>
            Suffix of the documentation object
            </summary>
        </member>
        <member name="T:TaskRunner.Documentation.T">
            <summary>
            Subclass representing a general purpose tuple for the documentation
            </summary>
        </member>
        <member name="M:TaskRunner.Documentation.T.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.Documentation.T.#ctor(System.String,System.String)">
            <summary>
            Constructor with parameters
            </summary>
            <param name="value">Value of the tuple</param>
            <param name="description">Description of the tuple</param>
        </member>
        <member name="M:TaskRunner.Documentation.T.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor with all parameters
            </summary>
            <param name="value">Value of the tuple</param>
            <param name="description">Description of the tuple</param>
            <param name="overrideTagFormatting">If true, the tuple will be displayed with its raw value and not as XML tag</param>
        </member>
        <member name="P:TaskRunner.Documentation.T.Value">
            <summary>
            Value of the tuple
            </summary>
        </member>
        <member name="P:TaskRunner.Documentation.T.Description">
            <summary>
            Description of the tuple
            </summary>
        </member>
        <member name="P:TaskRunner.Documentation.T.OverrideTagFormatting">
            <summary>
            If true, the tuple will be displayed with its raw value and not as XML tag
            </summary>
        </member>
        <member name="T:TaskRunner.LogEntry">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Class represents an entry for a logfile
            </summary>
        </member>
        <member name="M:TaskRunner.LogEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.LogEntry.getLogString">
            <summary>
            Returns a formated log entry as string (line). The first value is the current date
            </summary>
            <returns>Formated log entry as string</returns>
        </member>
        <member name="M:TaskRunner.LogEntry.PrintExecutionCode">
            <summary>
            Prints the execution Code as Hex string
            </summary>
            <returns>4 byte Hex string</returns>
        </member>
        <member name="M:TaskRunner.LogEntry.InsertCodeByte(System.Byte,System.Int32)">
            <summary>
            Inserts a byte into the execution code
            </summary>
            <param name="value">byte to replace</param>
            <param name="index">Index (0 to 3)</param>
        </member>
        <member name="P:TaskRunner.LogEntry.TaskName">
            <summary>
            The name of the main Task
            </summary>
        </member>
        <member name="P:TaskRunner.LogEntry.SubTaskName">
            <summary>
            The name of the Sub-Task
            </summary>
        </member>
        <member name="P:TaskRunner.LogEntry.Status">
            <summary>
            The execution status
            </summary>
        </member>
        <member name="P:TaskRunner.LogEntry.ExecutionDate">
            <summary>
            The execution date
            </summary>
        </member>
        <member name="P:TaskRunner.LogEntry.ExecutionCode">
            <summary>
            The execution code of the Sub-Task (4 bytes)
            </summary>
        </member>
        <member name="T:TaskRunner.Program">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Main class
            </summary>
        </member>
        <member name="M:TaskRunner.Program.Main(System.String[])">
            <summary>
            Main method
            </summary>
            <param name="args">Arguments like -r, -d, -o, h or -l</param>
        </member>
        <member name="M:TaskRunner.Program.Usage(System.Boolean)">
            <summary>
            Method returns the header and usage of the program as text
            </summary>
            <param name="headerOnly">If true, only the header is returned, otherwise the usage is added after the header</param>
            <returns>Header and/or usage of the program as text</returns>
        </member>
        <member name="M:TaskRunner.Program.Documentation">
            <summary>
            Method to handle he output of the documentation
            </summary>
        </member>
        <member name="M:TaskRunner.Program.CheckArgs(TaskRunner.ArgsTuple@,System.String,TaskRunner.ArgsTuple.ArgType)">
            <summary>
            Method to check the passed arguments
            </summary>
            <param name="tuple">Argument tuple as reference</param>
            <param name="argValue">Passed argument value</param>
            <param name="argType">The expected type of the argument</param>
            <returns>The expected type of the next argument. In case of -r|--run and -l|--log, this is configFile or logFile</returns>
        </member>
        <member name="T:TaskRunner.SubTasks.ControlServiceTask">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Derived Sub-Task Class to control Windows services
            </summary>
        </member>
        <member name="T:TaskRunner.SubTasks.SubTask">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Abstract class as template for Sub-Tasks to execute
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.Run">
            <summary>
            Abstract method to run the Sub-Task
            </summary>
            <returns>True if the task was executed successfully, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetDemoFile(System.Int32)">
            <summary>
            Abstract method to generate a demo configuration of the implemented class
            </summary>
            <param name="number">Optional number to indicate several Sub-Tasks</param>
            <returns>Sub-Task object of the implemented class</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetDocumentation(TaskRunner.SubTasks.SubTask.DocumentationType,System.Int32)">
            <summary>
            Gets the Documentation as Text
            </summary>
            <param name="type">Type of the documentation</param>
            <returns>Formated documentation</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.SaveMarkdown(System.String)">
            <summary>
            Saves the whole documentation as markdown text
            </summary>
            <param name="fileName">Filename of the markdown file</param>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetStatusCodeProlog(System.String,System.String)">
            <summary>
            Returns the static prolog of status codes as documentation 
            </summary>
            <param name="title">Title to display</param>
            <param name="subtitle">Subtitle to display</param>
            <returns>Formatted document</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetStatusModes(System.String,System.String)">
            <summary>
            Returns the static documentation of the execution modes
            </summary>
            <param name="title">Title to display</param>
            <param name="subtitle">Subtitle to display</param>
            <returns>Formatted document</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.AppendCommonAttributes(TaskRunner.Documentation@,System.String,System.String)">
            <summary>
            Appends common attributes to the attribute documentation
            </summary>
            <param name="documentation">Specific attribute documentation object</param>
            <param name="baseTag">Base tag of the Sub-Task</param>
            <param name="type">Type of the task as string</param>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.AppendCommonTags(TaskRunner.Documentation@,System.String)">
            <summary>
            Appends the common tags to the tag documentation
            </summary>
            <param name="documentation">Specific tag documentation object</param>
            <param name="baseTag">Base tag of the Sub-Task</param>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.PrintStatusCode(System.Boolean,System.Byte)">
            <summary>
            Prints a status code to a specific task
            </summary>
            <param name="status">Status (success or failure) of the task</param>
            <param name="code">Status code to print</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetDocumentationDescription">
            <summary>
            Gets the description of the Sub-Task as documentation collection
            </summary>
            <returns>Documentation collection</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetDocumentationStatusCodes">
            <summary>
            Gets the status codes of the Sub-Task as documentation collection
            </summary>
            <returns>Documentation collection</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetTagDocumentationParameters">
            <summary>
            Gets the tag parameters of the Sub-Task as documentation collection
            </summary>
            <returns>Documentation collection</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.SubTask.GetAttributesDocumentationParameters">
            <summary>
            Gets the attributes parameters (of all tags) of the Sub-Task as documentation collection
            </summary>
            <returns>Documentation collection</returns>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Enabled">
            <summary>
            Indicates whether the Sub-Task is executed (enabled) or not
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Name">
            <summary>
            Name of the Sub-Task. Will be displayed in -o mode
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.MainValue">
            <summary>
            The main value / command to execute. The meaning of this value varies depending on the actual implementation of the derived class
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Description">
            <summary>
            Optional description of the Sub-Task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Arguments">
            <summary>
            Optional arguments as strings to execute the Sub-Task. The meaning of these values varies depending on the actual implementation of the derived class
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Message">
            <summary>
            Message after execution of the Sub-Task. This Message is not serialized
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Prolog">
            <summary>
            Optional Message before execution of the Sub-Task. This Message is not serialized
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.StatusCode">
            <summary>
            Returned status Code (1 byte)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.TaskTypeCode">
            <summary>
            Abstract hex code of the task type (2 bytes)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.Type">
            <summary>
            Type of the Task / Sub-task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.DemoFileName">
            <summary>
            Name of the demo file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.SubTask.MarkdownFileName">
            <summary>
            Name of the markdown file
            </summary>
        </member>
        <member name="T:TaskRunner.SubTasks.SubTask.DocumentationType">
            <summary>
            Type of the documentation
            </summary>
        </member>
        <member name="F:TaskRunner.SubTasks.SubTask.DocumentationType.Description">
            <summary>
            General description as documentation
            </summary>
        </member>
        <member name="F:TaskRunner.SubTasks.SubTask.DocumentationType.StatusCodes">
            <summary>
            Status codes as documentation
            </summary>
        </member>
        <member name="F:TaskRunner.SubTasks.SubTask.DocumentationType.Tags">
            <summary>
            Tags as documentation
            </summary>
        </member>
        <member name="F:TaskRunner.SubTasks.SubTask.DocumentationType.Attributes">
            <summary>
            Attributes as documentation
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.Run">
            <summary>
            Implemented Run method of the SubTask class
            </summary>
            <returns>True if the task was executed successfully, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.GetDemoFile(System.Int32)">
            <summary>
            Implemented GetDemoFile method of the SubTask class
            </summary>
            <param name="number">Optional number to indicate several Sub-Tasks</param>
            <returns>Instance of the implemented class</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.GetDocumentationStatusCodes">
            <summary>
            Returns the documentation of the status codes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.GetTagDocumentationParameters">
            <summary>
            Returns the documentation of the XML tags for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.GetAttributesDocumentationParameters">
            <summary>
            Returns the documentation of the XML attributes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.ControlServiceTask.GetDocumentationDescription">
            <summary>
            Returns the description as documentation for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="P:TaskRunner.SubTasks.ControlServiceTask.TaskTypeCode">
            <summary>
            Implemented code of the task type (05)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.ControlServiceTask.Type">
            <summary>
            Type of the Task / Sub-task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.ControlServiceTask.DemoFileName">
            <summary>
            Name of the demo file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.ControlServiceTask.MarkdownFileName">
            <summary>
            Name of the markdown file
            </summary>
        </member>
        <member name="T:TaskRunner.SubTasks.DeleteFileTask">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Derived Sub-Task Class for deleting files
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.Run">
            <summary>
            Implemented Run method of the SubTask class
            </summary>
            <returns>True if the task was executed successfully, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.GetDemoFile(System.Int32)">
            <summary>
            Implemented GetDemoFile method of the SubTask class
            </summary>
            <param name="number">Optional number to indicate several Sub-Tasks</param>
            <returns>Instance of the implemented class</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.GetDocumentationStatusCodes">
            <summary>
            Returns the documentation of the status codes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.GetTagDocumentationParameters">
            <summary>
            Returns the documentation of the XML tags for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.GetAttributesDocumentationParameters">
            <summary>
            Returns the documentation of the XML attributes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteFileTask.GetDocumentationDescription">
            <summary>
            Returns the description as documentation for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteFileTask.TaskTypeCode">
            <summary>
            Implemented code of the task type (01)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteFileTask.Type">
            <summary>
            Type of the Task / Sub-task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteFileTask.DemoFileName">
            <summary>
            Name of the demo file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteFileTask.MarkdownFileName">
            <summary>
            Name of the markdown file
            </summary>
        </member>
        <member name="T:TaskRunner.SubTasks.DeleteRegKeyTask">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Derived Sub-Task Class for deleting registry entries
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.Run">
            <summary>
            Implemented Run method of the SubTask class
            </summary>
            <returns>True if the task was executed successfully, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.GetDemoFile(System.Int32)">
            <summary>
            Implemented GetDemoFile method of the SubTask class
            </summary>
            <param name="number">Optional number to indicate several Sub-Tasks</param>
            <returns>Instance of the implemented class</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.GetDocumentationStatusCodes">
            <summary>
            Returns the documentation of the status codes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.GetTagDocumentationParameters">
            <summary>
            Returns the documentation of the XML tags for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.GetAttributesDocumentationParameters">
            <summary>
            Returns the documentation of the XML attributes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.DeleteRegKeyTask.GetDocumentationDescription">
            <summary>
            Returns the description as documentation for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteRegKeyTask.TaskTypeCode">
            <summary>
            Implemented code of the task type (02)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteRegKeyTask.Type">
            <summary>
            Type of the Task / Sub-task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteRegKeyTask.DemoFileName">
            <summary>
            Name of the demo file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteRegKeyTask.MarkdownFileName">
            <summary>
            Name of the markdown file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.DeleteRegKeyTask.Hive">
            <summary>
            The hive of the registry key (e.g. HKLM or HKCU)
            </summary>
        </member>
        <member name="T:TaskRunner.SubTasks.StartProgramTask">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Derived Sub-Task Class for staring programs synchronous or asynchronous
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.RunAsyncronous(System.String,System.String)">
            <summary>
            Helper method to maintain the status of a running process if the task is executed asynchronous
            </summary>
            <param name="name">Name of the program to execute</param>
            <param name="args">Optional arguments to execute the program (separated by spaces)</param>
            <returns>Task object which contains the current status of the process</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.Run">
            <summary>
            Implemented Run method of the SubTask class
            </summary>
            <returns>True if the task was executed successfully, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.GetDemoFile(System.Int32)">
            <summary>
            Implemented GetDemoFile method of the SubTask class
            </summary>
            <param name="number">Optional number to indicate several Sub-Tasks</param>
            <returns>Instance of the implemented class</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.GetDocumentationStatusCodes">
            <summary>
            Returns the documentation of the status codes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.GetTagDocumentationParameters">
            <summary>
            Returns the documentation of the XML tags for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.GetAttributesDocumentationParameters">
            <summary>
            Returns the documentation of the XML attributes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.StartProgramTask.GetDocumentationDescription">
            <summary>
            Returns the description as documentation for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="P:TaskRunner.SubTasks.StartProgramTask.TaskTypeCode">
            <summary>
            Implemented code of the task type (03)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.StartProgramTask.Type">
            <summary>
            Type of the Task / Sub-task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.StartProgramTask.DemoFileName">
            <summary>
            Name of the demo file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.StartProgramTask.MarkdownFileName">
            <summary>
            Name of the markdown file
            </summary>
        </member>
        <member name="T:TaskRunner.SubTasks.WriteLogTask">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Derived Sub-Task Class for writing log entries
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.Run">
            <summary>
            Implemented Run method of the SubTask class
            </summary>
            <returns>True if the task was executed successfully, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.GetDemoFile(System.Int32)">
            <summary>
            Implemented GetDemoFile method of the SubTask class
            </summary>
            <param name="number">Optional number to indicate several Sub-Tasks</param>
            <returns>Instance of the implemented class</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.GetDocumentationStatusCodes">
            <summary>
            Returns the documentation of the status codes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.GetTagDocumentationParameters">
            <summary>
            Returns the documentation of the XML tags for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.GetAttributesDocumentationParameters">
            <summary>
            Returns the documentation of the XML attributes for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="M:TaskRunner.SubTasks.WriteLogTask.GetDocumentationDescription">
            <summary>
            Returns the description as documentation for the specific Sub-Task
            </summary>
            <returns>Documentation object</returns>
        </member>
        <member name="P:TaskRunner.SubTasks.WriteLogTask.TaskTypeCode">
            <summary>
            Implemented code of the task type (04)
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.WriteLogTask.Type">
            <summary>
            Type of the Task / Sub-task
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.WriteLogTask.DemoFileName">
            <summary>
            Name of the demo file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.WriteLogTask.MarkdownFileName">
            <summary>
            Name of the markdown file
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.WriteLogTask.CreateFolders">
            <summary>
            If true, the application will try to create the folder structure of the logfile if not existing
            </summary>
        </member>
        <member name="P:TaskRunner.SubTasks.WriteLogTask.Header">
            <summary>
            The header of the logfile (optional)
            </summary>
        </member>
        <member name="T:TaskRunner.Task">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Class for orchestration and execution of the Sub-Tasks
            </summary>
        </member>
        <member name="F:TaskRunner.Task.DATEFORMAT">
            <summary>
            Globally used format string for dates / times
            </summary>
        </member>
        <member name="M:TaskRunner.Task.EnumerateTaskTypes">
            <summary>
            Gets a List of all task types as instances of Sub-Tasks
            </summary>
            <returns>List of types (SubTask)</returns>
        </member>
        <member name="M:TaskRunner.Task.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TaskRunner.Task.Run(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method to run all SUb-Tasks of the current configuration
            </summary>
            <param name="stopOnError">If true, the method stops if an error occurs during execution of the Sub-Tasks</param>
            <param name="displayOutput">If true, information about the executed Sub-Tasks is passed to the command shell</param>
            <param name="log">If true, the execution of the Task and its Sub-Tasks will be logged</param>
            <returns>True if no errors occurred, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.Task.ResolveTaskMode(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resolves the mode how the Task is executed by the program (2 byte)
            </summary>
            <param name="stopOnError">If true, the task stops if an error occurs during execution of the Sub-Tasks</param>
            <param name="displayOutput">If true, information about the executed Sub-Tasks is passed to the command shell</param>
            <param name="log">If true, the execution of the Task and its Sub-Tasks will be logged</param>
        </member>
        <member name="M:TaskRunner.Task.Deserialize(System.String)">
            <summary>
            Method to deserialize a configuration
            </summary>
            <param name="filename">File name of the configuration</param>
            <returns>The deserialized configuration. In case of an error, an empty object with the parameter Valid=false is returned</returns>
        </member>
        <member name="M:TaskRunner.Task.Serialize(System.String)">
            <summary>
            Method to serialize the current configuration
            </summary>
            <param name="filename">File name of the configuration</param>
        </member>
        <member name="M:TaskRunner.Task.SerializeAsStream">
            <summary>
            Method to serialize the current configuration as memory stream 
            </summary>
            <returns>Memory stream</returns>
        </member>
        <member name="M:TaskRunner.Task.CreateDemoFile(TaskRunner.Task.TaskType)">
            <summary>
            Creates a demo file as string
            </summary>
            <param name="type">Task type of the demo configuration</param>
            <returns>Sting of the demo file</returns>
        </member>
        <member name="M:TaskRunner.Task.CreateDemoFile(System.String,TaskRunner.Task.TaskType)">
            <summary>
            Static method to generate an example configuration
            </summary>
            <param name="file">File name of the demo configuration</param>
            <param name="type">Task type of the demo configuration</param>
        </member>
        <member name="M:TaskRunner.Task.CreateDemoFile(System.String,TaskRunner.Task.TaskType,System.Boolean)">
            <summary>
            Static method to generate an example configuration as file or string
            </summary>
            <param name="file">File name of the demo configuration</param>
            <param name="type">Task type of the demo configuration</param>
            <param name="asFile">If true a file will be generated, otherwise a string returned</param>
        </member>
        <member name="M:TaskRunner.Task.Log(System.String)">
            <summary>
            Method to write all log entries of the executed Tasks
            </summary>
            <param name="logFile">File name of the logfile</param>
        </member>
        <member name="M:TaskRunner.Task.PrintExecutionCode(TaskRunner.LogEntry)">
            <summary>
            Prints the execution code of the task
            </summary>
            <param name="logEntry">Log entry to print the code from</param>
            <returns>Execution code as string</returns>
        </member>
        <member name="P:TaskRunner.Task.Enabled">
            <summary>
            Indicates whether the whole task is executed (enabled) or not
            </summary>
        </member>
        <member name="P:TaskRunner.Task.Type">
            <summary>
            Type of this Task
            </summary>
        </member>
        <member name="P:TaskRunner.Task.Items">
            <summary>
            List of Sub-Tasks to execute in this Task
            </summary>
            <remarks>Each class of a Sub-Task needs a distinct XML annotation (XmlArrayItem) for proper serialization / deserialization</remarks>
        </member>
        <member name="P:TaskRunner.Task.TaskName">
            <summary>
            Optional Task name
            </summary>
        </member>
        <member name="P:TaskRunner.Task.Description">
            <summary>
            Optional Task description
            </summary>
        </member>
        <member name="P:TaskRunner.Task.Valid">
            <summary>
            If proper deserialized, this value is set to true. It indicates that the configuration is valid (valid XML)
            </summary>
        </member>
        <member name="P:TaskRunner.Task.ExecutedTasks">
            <summary>
            The number of executed Sub-Tasks
            </summary>
        </member>
        <member name="P:TaskRunner.Task.OccurredErrors">
            <summary>
            The number of occurred errors during execution
            </summary>
        </member>
        <member name="P:TaskRunner.Task.LogEntries">
            <summary>
            List of log entries. Each executed Sub-Task has one entry
            </summary>
        </member>
        <member name="P:TaskRunner.Task.TaskMode">
            <summary>
            The mode how the Task is executed by the program (1 byte)
            </summary>
        </member>
        <member name="T:TaskRunner.Task.TaskType">
            <summary>
            Type of the Task and its Sub-Tasks
            </summary>
        </member>
        <member name="F:TaskRunner.Task.TaskType.DeleteFile">
            <summary>
            Task deletes files
            </summary>
        </member>
        <member name="F:TaskRunner.Task.TaskType.DeleteRegKey">
            <summary>
            Task delete registry entries
            </summary>
        </member>
        <member name="F:TaskRunner.Task.TaskType.WriteLog">
            <summary>
            Task writes log entries
            </summary>
        </member>
        <member name="F:TaskRunner.Task.TaskType.StartProgram">
            <summary>
            Task start programs
            </summary>
        </member>
        <member name="F:TaskRunner.Task.TaskType.ControlService">
            <summary>
            Starts, stops, restarts, pauses or resumes a Windows service
            </summary>
        </member>
        <member name="T:TaskRunner.Utils">
            <summary>
            Task Runner - (c) 2017 - Raphael Stoeckli
            This program and its code is released under the MIT license
            -----------------------------------------------------------
            Static Utils class
            </summary>
        </member>
        <member name="M:TaskRunner.Utils.Log(System.String,System.String,System.String)">
            <summary>
            Writes a logfile entry
            </summary>
            <param name="logFile">Path to the logfile</param>
            <param name="headerValue">Header as string. The values are separated by tab</param>
            <param name="value">Value or values to write. Use tab in case of several values to separate them</param>
            <returns>True if the entry could be written, otherwise false</returns>
        </member>
        <member name="M:TaskRunner.Utils.ConvertBytesToString(System.Byte[])">
            <summary>
            Converts a byte array into a hex string
            </summary>
            <param name="input">Byte array to convert</param>
            <returns>Hex string (e.g. '0AF3')</returns>
        </member>
        <member name="M:TaskRunner.Utils.ConvertBytesToString(System.Byte)">
            <summary>
            Converts a single byte into a hex string
            </summary>
            <param name="input">Byte to convert</param>
            <returns>Hex string (e.g. '00', '51' or 'BC')</returns>
        </member>
    </members>
</doc>
